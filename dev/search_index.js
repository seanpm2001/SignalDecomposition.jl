var documenterSearchIndex = {"docs":
[{"location":"#SignalDecomposition.jl-1","page":"Documentation","title":"SignalDecomposition.jl","text":"","category":"section"},{"location":"#","page":"Documentation","title":"Documentation","text":"Depth = 3","category":"page"},{"location":"#Overview-1","page":"Documentation","title":"Overview","text":"","category":"section"},{"location":"#","page":"Documentation","title":"Documentation","text":"SignalDecomposition.jl offers a single function:","category":"page"},{"location":"#","page":"Documentation","title":"Documentation","text":"decompose","category":"page"},{"location":"#SignalDecomposition.decompose","page":"Documentation","title":"SignalDecomposition.decompose","text":"decompose([t, ] s, method::Decomposition) → p, r\n\nDecompose an 1D input signal or timeseries s(t) into its periodic and residual components p, r using the given method. t defaults to 1:length(s). Other common names for p, r are \"seasonal\" and \"trend\".\n\nThe decomposition is under addition, i.e. s = p .+ r, unless explicitly noted otherwise by the method. By convention, the periodic component also includes the mean value of s.\n\n\n\n\n\n","category":"function"},{"location":"#Methods-1","page":"Documentation","title":"Methods","text":"","category":"section"},{"location":"#","page":"Documentation","title":"Documentation","text":"Modules = [SignalDecomposition]\nOrder   = [:type]","category":"page"},{"location":"#SignalDecomposition.Decomposition","page":"Documentation","title":"SignalDecomposition.Decomposition","text":"Abstract type of all decomposition methods.\n\n\n\n\n\n","category":"type"},{"location":"#SignalDecomposition.Fourier","page":"Documentation","title":"SignalDecomposition.Fourier","text":"Fourier(frequencies) <: Decomposition\n\nSimple decomposition method that identifies specific frequencies at the Fourier space and removes them from the signal. The residual is the inverse of the remaining Fourier signal, while the periodic part is just the removed components. If a given frequency is exactly matching the Fourier frequencies, the closest one is removed.\n\nImportant: periods/frequencies are defined with respect to the time axis length, the actual time axis t is not used in this method. So, frequency 1/12 (a period of 12) means 12 time points (whose actual time value depends on t).\n\nThis method works well when a periodic signal P is superimposed on fluctuations S, and you have a good educated guess of what frequencies compose P. This method works if the given signal has length multiple of the largest period given.\n\n\n\n\n\n","category":"type"},{"location":"#SignalDecomposition.SinusoidalFit","page":"Documentation","title":"SignalDecomposition.SinusoidalFit","text":"SinusoidalFit(s, fs) <: Decomposition\n\nFit sinuisoidals with given frequencies fs to the signal s in decompose using the package LsqFit. Specifically, fit\n\ns - bars approx sum_i A_i (sin(2pi f_i t) + phi_i)\n\nwith bars the mean. The fit happens on the amplitudes and phases A_i phi_i. After the decomposition you can find these in the struct's fields amps, phases. The fit is done on s versus t, so be sure that you have transformed t appropriately (e.g. if t is \"days\" but your frequencies are multiples of years, then you should give t/365.26).\n\nSinusoidalFit(fs, φ0s, A0s [, ub, lb])\n\nThe quality of the fit depends dramatically on the initial guesses for the phases and amplitudes, φ0s, A0s. This second constructor gives full control over initial phases and amplitudes, as well as upper and lower bounds on the amplitudes ub, lb (also vectors of length(fs)). In the first constructor φ0 = 0, A0 = abs(-(extrema(s)...))/2, ub = Inf, lb = -Inf for all frequencies. (the bounds for the phases are always ± π)\n\nNotice: LsqFit performs poorly for fitting sinusoidals and Fourier should be preferred over this method if the signal given is in multiples of the expected periods (and of course t is equally spaced).\n\n\n\n\n\n","category":"type"}]
}
